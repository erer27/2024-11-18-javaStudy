/*
 * 		=>Front / Back
 * 			|		|
 * 				   Spring-Boot                              
 * 		   VueJS ==> 소규모 
 * 			ReactJS ==> 대규모 => 최적화 : NextJS
 * 			------- 개인 프로젝트
 * 
 * 		메소드
 * 		=> 정의 : 한개의 기능을 수행하는 명령문의 집합 
 * 				 -------------
 * 				 => 조립 : process()
 * 				 => main에서 코딩을 하지 않는다
 * 					=> process()만 호출
 * 				=> 로그인 처리 / 회원 가입 / 회원 수정 / 회원 탈퇴
 * 				=> 목록 / 글쓰기 / 상세보기 / 수정 / 삭제 / 검색
 * 		=> 1. 반복적인 문장이 있는 경우 (반복 제거)
 * 		   예)
 * 				오라클 연결
 * 				--------
 * 				목록 읽기 기능
 * 				----------
 * 				오라클 연결
 * 				목록 읽기
 * 				오라클 닫기
 * 				---------
 * 
 * 				글쓰기
 * 				---------
 * 				오라클 연결
 * 				글쓰기
 * 				오라클 닫기 => 메소드
 * 				---------
 * 
 * 				상세보기
 * 				---------
 * 				오라클 연결
 * 				글쓰기	
 * 				오라클 닫기
 * 				---------
 * 		=> 2. 명령문을 기능별 분리 => 단락을 나눠서 처리
 * 			  = 가독성 : 보기가 편리하다 (소스가 간결하다)
 * 			  = 유지보수 : 수정이 용이 
 * 			  = 재사용 : 어떤 클래스에서든 필요시마다 사용이 가능
 * 				Math.random() System.out.println()
 * 			  = 최적화
 * 		---------------------------------------------
 * 		데이터 저장 => 저장된 데이터 가공 ==> 가공된 데이터 출력
 * 			|			 |
 * 		   변수		   연산자/제어문
 * 		   배열		   ----------
 * 						묶어서 처리=>메소드
 * 		---------------------------------------------
 * 
 * 		메소드 => 사용할 때 (호출)
 * 				호출이 되면 메소드 처음부터 수행 => 다시 호출된 위치로 복귀
 * 
 * 		메소드 구성요소
 * 		1) 결과값 : 사용자 요청에 따라 결과값 추출 (리턴형)
 * 			Math.random() => 난수를 추출
 * 		2) 사용자 요청 : 매개변수
 * 			예) 로그인 => id,pwd
 * 				+ => 정수,정수
 * 				  아이디 중복 체크 => id
 * 		3) 메소드명 => 기능에 맞게 이름부여
 * 					 => plus(), minus() ....
 * 					 => 변수 식별자와 동일
 * 						1) 알파벳, 한글 => 알파벳 대소문자 구분
 * 						2) 숫자 사용 가능 => 앞에 사용 할 수 없다
 * 						3) 키워드는 사용이 불가능
 * 						4) 특수문자 사용 => $, ㅡ
 * 						5) 공백이 있으면 안된다
 * 						6) => 문법 사항은 아니다 => 소문자로 시작한다
 * 		메소드 형식 : 선언부 / 구현부
 * 		
 * 		[접근지정어][옵션] 리턴형 메소드명(매개변수...)//선언부
 * 		--------- ---- -----       ---------
 * 									여러개 사용이 가능 
 * 					|   | 기본형|배열|클래스 => 결과값은 반드시 1개 사용이 가능
 * 								------ 결과값이 여러개
 * 				  static|final|abstract
 * 				  ------ ----- --------
 * 				  | 자동 메모리 저장 종단   | 선언만
 * 		public|private|protected|default
 * 		   |	  |		  |			|
 * 								   같은 폴더
 * 						같은 폴더|상속
 * 				자신의 클래스
 * 		  모든 클래스
 * 		{
 * 			구현부 
 * 			return 값 => 결과값
 * 		}
 * 
 * 		------------------------
 * 			리턴형		매개변수
 * 		------------------------
 * 			 1) o			 o
 * 			 String substring(int begin)
 * 			   |				 |
 * 			  리턴형				매개변수
 * 		------------------------
 * 			 2) o			 x
 * 			 double random()
 * 			 ------		 ----
 * 		------------------------
 * 			 3) x			 o
 * 			 void println(String s)
 * 			 ----- 결과값 없다
 * 		------------------------
 * 			 4) x			 x ==> 사용빈도는 거의 없다
 * 			 void System.out.println()
 * 		------------------------
 * 		3),4) => 메소드 자체에서 출력
 * 
 * 		=> 결과값을 받아서 출력
 * 		=> 메소드안에서 출력
 * 		=> return => void는 생략이 가능 
 */
/*
 * 		자동 생성
 * 		-------
 * 		import java.lang.*; => String, System...
 * 		=> 메소드 : void일 경우에 생략을 하면 자동 첨부 
 * 
 * 		메소드는 반드시 호출을 해야 사용이 가능
 * 		void display()
 * 		int display()
 * 		int display(int a)
 * 		void display(int a,int b)
 * 
 * 		호출하는 방법 
 * 		public static void main(String[] arg){
 * 			display();
 * 			
 * 			int a=display();
 * 
 * 			int a=display(10);
 * 			
 * 			display(10,20);
 * 		}
 */
public class 메소드_1 {
	// 4) 리턴형 / 매개변수가 없는 경우
	// => 메소드안에서 구구단을 출력
	static void gugudan()
	{
		// void => 메소드안에서 출력 => 전체 처리를 한다
		for(int i=1;i<=9;i++) { // 줄수
			for(int j=2;j<=9;j++) { // 단출력
				System.out.printf("%-2d * %-2d =%-2d\t", j,i,j*i);
			}
			System.out.println();
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		gugudan();// 메소드 호출
		return; // 컴파일시에 return이 없는 경우에는 자동으로 생성 
		// return => 메소드 종료
	}

}
